const nodemailer = require('nodemailer');

class EmailService {
  constructor() {
    this.transporter = null;
    this.initializeTransporter();
  }

  // Initialize email transporter
  initializeTransporter() {
    try {
      this.transporter = nodemailer.createTransport({
        service: 'gmail',
        auth: {
          user: process.env.EMAIL_USER,
          pass: process.env.EMAIL_PASS
        }
      });
    } catch (error) {
      console.error('Email transporter initialization error:', error);
    }
  }

  // Validate email configuration
  validateConfig() {
    if (!process.env.EMAIL_USER || !process.env.EMAIL_PASS) {
      throw new Error('Email configuration missing. Please set EMAIL_USER and EMAIL_PASS.');
    }
    
    if (!this.transporter) {
      throw new Error('Email transporter not initialized.');
    }
  }

  // Validate email addresses
  validateEmails(emails) {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    const invalidEmails = emails.filter(email => !emailRegex.test(email));
    
    if (invalidEmails.length > 0) {
      throw new Error(`Invalid email addresses: ${invalidEmails.join(', ')}`);
    }
  }

  // Send summary email
  async sendSummaryEmail(recipients, summary, subject = 'Meeting Summary', senderName = 'AI Meeting Summarizer') {
    try {
      this.validateConfig();
      this.validateEmails(recipients);

      const emailContent = this.generateEmailContent(summary, subject);

      const mailOptions = {
        from: `"${senderName}" <${process.env.EMAIL_USER}>`,
        to: recipients.join(', '),
        subject: subject,
        html: emailContent.html,
        text: emailContent.text
      };

      const result = await this.transporter.sendMail(mailOptions);
      
      console.log('Email sent successfully:', {
        messageId: result.messageId,
        recipients: recipients,
        subject: subject
      });

      return {
        success: true,
        messageId: result.messageId,
        recipients: recipients
      };

    } catch (error) {
      console.error('Email sending error:', error);
      throw new Error(`Failed to send email: ${error.message}`);
    }
  }

  // Generate email content
  generateEmailContent(summary, subject) {
    const htmlContent = `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>${subject}</title>
        <style>
          body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 600px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f9f9f9;
          }
          .email-container {
            background-color: white;
            padding: 30px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
          }
          .header {
            border-bottom: 2px solid #007bff;
            padding-bottom: 15px;
            margin-bottom: 25px;
          }
          .header h1 {
            color: #007bff;
            margin: 0;
            font-size: 24px;
          }
          .summary-content {
            background-color: #f8f9fa;
            padding: 20px;
            border-radius: 6px;
            border-left: 4px solid #007bff;
            white-space: pre-wrap;
            font-size: 14px;
            line-height: 1.7;
          }
          .footer {
            margin-top: 30px;
            padding-top: 20px;
            border-top: 1px solid #eee;
            font-size: 12px;
            color: #666;
            text-align: center;
          }
          .timestamp {
            color: #888;
            font-size: 12px;
            margin-bottom: 15px;
          }
        </style>
      </head>
      <body>
        <div class="email-container">
          <div class="header">
            <h1>ðŸ“‹ ${subject}</h1>
            <div class="timestamp">
              Generated on ${new Date().toLocaleDateString()} at ${new Date().toLocaleTimeString()}
            </div>
          </div>
          
          <div class="summary-content">
            ${summary.replace(/\n/g, '<br>')}
          </div>
          
          <div class="footer">
            <p>This summary was generated by AI Meeting Summarizer</p>
            <p>For questions or feedback, please contact the sender.</p>
          </div>
        </div>
      </body>
      </html>
    `;

    const textContent = `
${subject}
Generated on ${new Date().toLocaleDateString()} at ${new Date().toLocaleTimeString()}

${summary}

---
This summary was generated by AI Meeting Summarizer
For questions or feedback, please contact the sender.
    `;

    return {
      html: htmlContent,
      text: textContent
    };
  }

  // Send bulk emails (for multiple recipients)
  async sendBulkEmails(recipients, summary, subject = 'Meeting Summary') {
    const results = [];
    
    for (const recipient of recipients) {
      try {
        const result = await this.sendSummaryEmail([recipient], summary, subject);
        results.push({
          email: recipient,
          success: true,
          messageId: result.messageId
        });
      } catch (error) {
        results.push({
          email: recipient,
          success: false,
          error: error.message
        });
      }
    }

    return results;
  }

  // Test email configuration
  async testConnection() {
    try {
      this.validateConfig();
      await this.transporter.verify();
      return { success: true, message: 'Email configuration is valid' };
    } catch (error) {
      return { success: false, error: error.message };
    }
  }

  // Get email statistics
  getEmailStats() {
    return {
      configured: !!(process.env.EMAIL_USER && process.env.EMAIL_PASS),
      service: 'gmail',
      user: process.env.EMAIL_USER ? `${process.env.EMAIL_USER.substring(0, 3)}***@gmail.com` : 'Not configured'
    };
  }
}

module.exports = new EmailService();
